import java.util.Map;
import java.util.concurrent.ConcurrentHashMap; // Using ConcurrentHashMap for thread safety later

/**
 * AppCache implements the Singleton pattern to provide a global,
 * in-memory cache for ConfigurationData keyed by EnhancementId.
 */
public class AppCache {

    // The single, static, final instance (initialized eagerly)
    private static final AppCache INSTANCE = new AppCache();

    // The actual cache storage.
    //    Using ConcurrentHashMap for inherent thread-safety (addresses part 3 later)
    private final Map<EnhancementId, ConfigurationData> cache;

    // Private constructor to prevent external instantiation.
    private AppCache() {
        // Initialize the cache map
        cache = new ConcurrentHashMap<>();
        System.out.println("AppCache Singleton instance created."); // Optional: for verification
    }

    // Public static method to get the single instance.
    public static AppCache getInstance() {
        return INSTANCE;
    }

    /**
     * Adds or updates an entry in the cache.
     *
     * @param enhancementId The key.
     * @param configurationData The value.
     */
    public void set(EnhancementId enhancementId, ConfigurationData configurationData) {
        if (enhancementId == null) {
            System.err.println("Warning: Trying to cache with null EnhancementId.");
            return;
        }
        if (configurationData == null) {
             System.err.println("Warning: Trying to cache null ConfigurationData for ID: " + enhancementId);
        }
        cache.put(enhancementId, configurationData);
        // System.out.println("Cached: " + enhancementId + " -> " + configurationData); // Optional logging
    }

    /**
     * Retrieves an entry from the cache.
     *
     * @param enhancementId The key.
     * @return The cached ConfigurationData, or null if not found.
     */
    public ConfigurationData get(EnhancementId enhancementId) {
        if (enhancementId == null) {
            return null;
        }
        return cache.get(enhancementId);
    }
}
